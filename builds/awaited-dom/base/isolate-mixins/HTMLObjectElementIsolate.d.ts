import AwaitedHandler from '../AwaitedHandler';
import AwaitedPath from '../AwaitedPath';
import { IHTMLObjectElementIsolate } from '../interfaces/isolate';
import { ISuperDocument } from '../interfaces/super';
import { IHTMLFormElement, IValidityState } from '../interfaces/official';
export declare const getState: (instance: IHTMLObjectElementIsolate) => IHTMLObjectElementIsolateProperties, setState: (instance: IHTMLObjectElementIsolate, properties: Partial<IHTMLObjectElementIsolateProperties>) => void, recordProxy: (proxy: IHTMLObjectElementIsolate, instance: IHTMLObjectElementIsolate) => void;
export declare const awaitedHandler: AwaitedHandler<IHTMLObjectElementIsolate>;
export default class HTMLObjectElementIsolate implements IHTMLObjectElementIsolate {
    get align(): Promise<string>;
    get archive(): Promise<string>;
    get border(): Promise<string>;
    get code(): Promise<string>;
    get codeBase(): Promise<string>;
    get codeType(): Promise<string>;
    get contentDocument(): ISuperDocument;
    get data(): Promise<string>;
    get declare(): Promise<boolean>;
    get form(): IHTMLFormElement;
    get height(): Promise<number> | Promise<string>;
    get hspace(): Promise<number>;
    get name(): Promise<string>;
    get standby(): Promise<string>;
    get type(): Promise<string>;
    get useMap(): Promise<string>;
    get validationMessage(): Promise<string>;
    get validity(): Promise<IValidityState>;
    get vspace(): Promise<number>;
    get width(): Promise<number> | Promise<string>;
    get willValidate(): Promise<boolean>;
    checkValidity(): Promise<boolean>;
    reportValidity(): Promise<boolean>;
}
export interface IHTMLObjectElementIsolateProperties {
    awaitedPath: AwaitedPath;
    awaitedOptions: any;
    readonly align?: Promise<string>;
    readonly archive?: Promise<string>;
    readonly border?: Promise<string>;
    readonly code?: Promise<string>;
    readonly codeBase?: Promise<string>;
    readonly codeType?: Promise<string>;
    readonly contentDocument?: ISuperDocument;
    readonly data?: Promise<string>;
    readonly declare?: Promise<boolean>;
    readonly form?: IHTMLFormElement;
    readonly height?: Promise<number> | Promise<string>;
    readonly hspace?: Promise<number>;
    readonly name?: Promise<string>;
    readonly standby?: Promise<string>;
    readonly type?: Promise<string>;
    readonly useMap?: Promise<string>;
    readonly validationMessage?: Promise<string>;
    readonly validity?: Promise<IValidityState>;
    readonly vspace?: Promise<number>;
    readonly width?: Promise<number> | Promise<string>;
    readonly willValidate?: Promise<boolean>;
}
export declare const HTMLObjectElementIsolatePropertyKeys: string[];
export declare const HTMLObjectElementIsolateConstantKeys: never[];
