import AwaitedHandler from '../AwaitedHandler';
import AwaitedPath from '../AwaitedPath';
import NodeFactory from '../NodeFactory';
import { IXPathResult } from '../interfaces/official';
import { ISuperNode } from '../interfaces/super';
export declare const getState: (instance: IXPathResult) => IXPathResultProperties, setState: (instance: IXPathResult, properties: Partial<IXPathResultProperties>) => void, recordProxy: (proxy: IXPathResult, instance: IXPathResult) => void;
export declare const awaitedHandler: AwaitedHandler<IXPathResult>;
export declare const nodeFactory: NodeFactory<IXPathResult>;
export declare function XPathResultGenerator(): {
    new (): {
        readonly ANY_TYPE: number;
        readonly ANY_UNORDERED_NODE_TYPE: number;
        readonly BOOLEAN_TYPE: number;
        readonly FIRST_ORDERED_NODE_TYPE: number;
        readonly NUMBER_TYPE: number;
        readonly ORDERED_NODE_ITERATOR_TYPE: number;
        readonly ORDERED_NODE_SNAPSHOT_TYPE: number;
        readonly STRING_TYPE: number;
        readonly UNORDERED_NODE_ITERATOR_TYPE: number;
        readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;
        readonly booleanValue: Promise<boolean>;
        readonly invalidIteratorState: Promise<boolean>;
        readonly numberValue: Promise<number>;
        readonly resultType: Promise<number>;
        readonly singleNodeValue: ISuperNode;
        readonly snapshotLength: Promise<number>;
        readonly stringValue: Promise<string>;
        iterateNext(): ISuperNode;
        snapshotItem(index: number): ISuperNode;
        then<TResult1 = IXPathResult, TResult2 = never>(onfulfilled?: ((value: IXPathResult) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    };
    readonly ANY_TYPE: number;
    readonly ANY_UNORDERED_NODE_TYPE: number;
    readonly BOOLEAN_TYPE: number;
    readonly FIRST_ORDERED_NODE_TYPE: number;
    readonly NUMBER_TYPE: number;
    readonly ORDERED_NODE_ITERATOR_TYPE: number;
    readonly ORDERED_NODE_SNAPSHOT_TYPE: number;
    readonly STRING_TYPE: number;
    readonly UNORDERED_NODE_ITERATOR_TYPE: number;
    readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;
};
export interface IXPathResultProperties {
    awaitedPath: AwaitedPath;
    awaitedOptions: any;
    createInstanceName: string;
    readonly booleanValue?: Promise<boolean>;
    readonly invalidIteratorState?: Promise<boolean>;
    readonly numberValue?: Promise<number>;
    readonly resultType?: Promise<number>;
    readonly singleNodeValue?: ISuperNode;
    readonly snapshotLength?: Promise<number>;
    readonly stringValue?: Promise<string>;
}
export declare const XPathResultPropertyKeys: string[];
export declare const XPathResultConstantKeys: string[];
