import { IHTMLDocument } from '../../base/interfaces/official';
import { IHTMLDocumentProperties } from '../../base/official-klasses/HTMLDocument';
export declare const getState: (instance: IHTMLDocument) => IHTMLDocumentProperties, setState: (instance: IHTMLDocument, properties: Partial<IHTMLDocumentProperties>) => void;
declare const HTMLDocumentBaseClass: {
    new (): {
        readonly URL: Promise<string>;
        readonly anchors: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly body: import("../../base/interfaces/super").ISuperHTMLElement;
        readonly characterSet: Promise<string>;
        readonly compatMode: Promise<string>;
        readonly contentType: Promise<string>;
        readonly cookie: Promise<string>;
        readonly designMode: Promise<string>;
        readonly dir: Promise<string>;
        readonly doctype: import("../../base/interfaces/official").IDocumentType;
        readonly documentElement: import("../../base/interfaces/super").ISuperElement;
        readonly documentURI: Promise<string>;
        readonly domain: Promise<string>;
        readonly embeds: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly featurePolicy: import("../../base/interfaces/official").IFeaturePolicy;
        readonly forms: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly fullscreenEnabled: Promise<boolean>;
        readonly head: import("../../base/interfaces/official").IHTMLHeadElement;
        readonly hidden: Promise<boolean>;
        readonly images: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly implementation: import("../../base/interfaces/official").IDOMImplementation;
        readonly lastModified: Promise<string>;
        readonly links: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly location: import("../../base/interfaces/official").ILocation;
        readonly plugins: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly readyState: Promise<import("../../base/interfaces/official").IDocumentReadyState>;
        readonly referrer: Promise<string>;
        readonly scripts: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly scrollingElement: import("../../base/interfaces/super").ISuperElement;
        readonly title: Promise<string>;
        readonly visibilityState: Promise<import("../../base/interfaces/official").IVisibilityState>;
        exitFullscreen(): Promise<void>;
        exitPointerLock(): Promise<void>;
        getElementsByClassName(classNames: string): import("../../base/interfaces/super").ISuperHTMLCollection;
        getElementsByName(elementName: string): import("../../base/interfaces/super").ISuperNodeList;
        getElementsByTagName(qualifiedName: string): import("../../base/interfaces/super").ISuperHTMLCollection;
        getElementsByTagNameNS(namespace: string | null, localName: string): import("../../base/interfaces/super").ISuperHTMLCollection;
        hasFocus(): Promise<boolean>;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: Promise<string>;
        readonly childNodes: import("../../base/interfaces/super").ISuperNodeList;
        readonly firstChild: import("../../base/interfaces/super").ISuperNode;
        readonly isConnected: Promise<boolean>;
        readonly lastChild: import("../../base/interfaces/super").ISuperNode;
        readonly nextSibling: import("../../base/interfaces/super").ISuperNode;
        readonly nodeName: Promise<string>;
        readonly nodeType: Promise<number>;
        readonly nodeValue: Promise<string | null>;
        readonly ownerDocument: import("../../base/interfaces/super").ISuperDocument;
        readonly parentElement: import("../../base/interfaces/super").ISuperElement;
        readonly parentNode: import("../../base/interfaces/super").ISuperNode;
        readonly previousSibling: import("../../base/interfaces/super").ISuperNode;
        readonly textContent: Promise<string | null>;
        compareDocumentPosition(other: import("../../base/interfaces/isolate").INodeIsolate): Promise<number>;
        contains(other: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        getRootNode(options?: import("../../base/interfaces/official").IGetRootNodeOptions | undefined): import("../../base/interfaces/super").ISuperNode;
        hasChildNodes(): Promise<boolean>;
        isDefaultNamespace(namespace: string | null): Promise<boolean>;
        isEqualNode(otherNode: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        isSameNode(otherNode: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        lookupNamespaceURI(prefix: string | null): Promise<string | null>;
        lookupPrefix(namespace: string | null): Promise<string | null>;
        normalize(): Promise<void>;
        readonly activeElement: import("../../base/interfaces/super").ISuperElement;
        readonly fullscreenElement: import("../../base/interfaces/super").ISuperElement;
        readonly pointerLockElement: import("../../base/interfaces/super").ISuperElement;
        caretPositionFromPoint(x: number, y: number): import("../../base/interfaces/official").ICaretPosition;
        elementFromPoint(x: number, y: number): import("../../base/interfaces/super").ISuperElement;
        getSelection(): import("../../base/interfaces/official").ISelection;
        getElementById(elementId: string): import("../../base/interfaces/super").ISuperElement;
        readonly childElementCount: Promise<number>;
        readonly children: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly firstElementChild: import("../../base/interfaces/super").ISuperElement;
        readonly lastElementChild: import("../../base/interfaces/super").ISuperElement;
        querySelector(selectors: string): import("../../base/interfaces/super").ISuperElement;
        querySelectorAll(selectors: string): import("../../base/interfaces/super").ISuperNodeList;
        createExpression(expression: string, resolver?: import("../../base/interfaces/official").IXPathNSResolver | null | undefined): import("../../base/interfaces/official").IXPathExpression;
        evaluate(expression: string, contextNode: import("../../base/interfaces/isolate").INodeIsolate, resolver?: import("../../base/interfaces/official").IXPathNSResolver | null | undefined, type?: number | undefined, result?: import("../../base/interfaces/official").IXPathResult | null | undefined): import("../../base/interfaces/official").IXPathResult;
    };
};
export default class HTMLDocument extends HTMLDocumentBaseClass implements IHTMLDocument {
    constructor();
}
export {};
